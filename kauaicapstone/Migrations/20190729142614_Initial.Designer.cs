// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using kauaicapstone.Data;

namespace kauaicapstone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190729142614_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("kauaicapstone.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11856b00-bf9a-4357-a1c1-1afa654a396e",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            IsAdmin = false,
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAgVhV+CRlKOFLRV/hXPBlkLYhopHjidw7cVcTI+kIfk3XnBMqcCFnkAgVKVLl5haQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "00000001-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c87a1417-b979-4f5a-8333-999ce225bf91",
                            Email = "rose@rose.com",
                            EmailConfirmed = true,
                            FirstName = "Rose",
                            IsAdmin = false,
                            LastName = "Wisotzky",
                            LockoutEnabled = false,
                            NormalizedEmail = "ROSE@ROSE.COM",
                            NormalizedUserName = "ROSE@ROSE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL1g82Oo3gmiRtYEcBWk12FETfiFoEfpt/9ZZYTBzJWWzDQsSsZ8K0gmrnENsHXVkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794578",
                            TwoFactorEnabled = false,
                            UserName = "rose@rose.com"
                        });
                });

            modelBuilder.Entity("kauaicapstone.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePosted");

                    b.Property<int>("LocationId");

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<int?>("ViewLocationId");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewLocationId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            DatePosted = new DateTime(2019, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LocationId = 2,
                            Message = "You can also visit the dry caves from Makua Beach, the bridge will be closed if there is heavy rain",
                            UserId = "00000001-ffff-ffff-ffff-ffffffffffff"
                        });
                });

            modelBuilder.Entity("kauaicapstone.Models.Legend", b =>
                {
                    b.Property<int>("LegendId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsApproved");

                    b.Property<string>("Source");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<int?>("ViewLocationId");

                    b.HasKey("LegendId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewLocationId");

                    b.ToTable("Legend");

                    b.HasData(
                        new
                        {
                            LegendId = 1,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Eget duis at tellus at urna condimentum mattis pellentesque id. Arcu non odio euismod lacinia at. Faucibus pulvinar elementum integer enim neque volutpat ac tincidunt vitae. Donec adipiscing tristique risus nec feugiat. Congue quisque egestas diam in arcu cursus euismod. Diam vel quam elementum pulvinar etiam non quam.",
                            IsApproved = false,
                            Source = "Kauai Tales by Frederick Bruce Wichman",
                            Title = "Na-Piliwale",
                            UserId = "00000001-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            LegendId = 2,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Eget duis at tellus at urna condimentum mattis pellentesque id. Arcu non odio euismod lacinia at. Faucibus pulvinar elementum integer enim neque volutpat ac tincidunt vitae. Donec adipiscing tristique risus nec feugiat. Congue quisque egestas diam in arcu cursus euismod. Diam vel quam elementum pulvinar etiam non quam.",
                            IsApproved = false,
                            Source = "Kauai Tales by Frederick Bruce Wichman",
                            Title = "Pohaku-o-Kane",
                            UserId = "00000001-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            LegendId = 3,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Eget duis at tellus at urna condimentum mattis pellentesque id. Arcu non odio euismod lacinia at. Faucibus pulvinar elementum integer enim neque volutpat ac tincidunt vitae. Donec adipiscing tristique risus nec feugiat. Congue quisque egestas diam in arcu cursus euismod. Diam vel quam elementum pulvinar etiam non quam.",
                            IsApproved = false,
                            Source = "Kauai Tales by Frederick Bruce Wichman",
                            Title = "Kanaka-Nunui-Moa",
                            UserId = "00000001-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            LegendId = 4,
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Eget duis at tellus at urna condimentum mattis pellentesque id. Arcu non odio euismod lacinia at. Faucibus pulvinar elementum integer enim neque volutpat ac tincidunt vitae. Donec adipiscing tristique risus nec feugiat. Congue quisque egestas diam in arcu cursus euismod. Diam vel quam elementum pulvinar etiam non quam.",
                            IsApproved = false,
                            Source = "Kauai Tales by Frederick Bruce Wichman",
                            Title = "Nou O Makana",
                            UserId = "00000001-ffff-ffff-ffff-ffffffffffff"
                        });
                });

            modelBuilder.Entity("kauaicapstone.Models.LegendViewLocation", b =>
                {
                    b.Property<int>("LegendViewLocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LegendId");

                    b.Property<int>("ViewLocationId");

                    b.HasKey("LegendViewLocationId");

                    b.HasIndex("LegendId");

                    b.HasIndex("ViewLocationId");

                    b.ToTable("LegendViewLocation");
                });

            modelBuilder.Entity("kauaicapstone.Models.ViewLocation", b =>
                {
                    b.Property<int>("ViewLocationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<string>("ViewPointAddress")
                        .IsRequired();

                    b.HasKey("ViewLocationId");

                    b.HasIndex("UserId");

                    b.ToTable("ViewLocation");

                    b.HasData(
                        new
                        {
                            ViewLocationId = 1,
                            Name = "Makua Beach",
                            UserId = "00000001-ffff-ffff-ffff-ffffffffffff",
                            ViewPointAddress = "HI-560, Kapaʻa, HI 96746"
                        },
                        new
                        {
                            ViewLocationId = 2,
                            Name = "Limahuli Garden & Preserve",
                            UserId = "00000001-ffff-ffff-ffff-ffffffffffff",
                            ViewPointAddress = "5-8291 Kuhio Hwy, Hanalei, HI 96714"
                        },
                        new
                        {
                            ViewLocationId = 3,
                            Name = "Kalalau Valley",
                            UserId = "00000001-ffff-ffff-ffff-ffffffffffff",
                            ViewPointAddress = "5-8291 Kuhio Hwy, Hanalei, HI 96714"
                        },
                        new
                        {
                            ViewLocationId = 4,
                            Name = "Sleeping Giant Trail",
                            UserId = "00000001-ffff-ffff-ffff-ffffffffffff",
                            ViewPointAddress = "Sleeping Giant, Wailua, HI 96746"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("kauaicapstone.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("kauaicapstone.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("kauaicapstone.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("kauaicapstone.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("kauaicapstone.Models.Comment", b =>
                {
                    b.HasOne("kauaicapstone.Models.ApplicationUser", "User")
                        .WithMany("UserComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("kauaicapstone.Models.ViewLocation")
                        .WithMany("Comments")
                        .HasForeignKey("ViewLocationId");
                });

            modelBuilder.Entity("kauaicapstone.Models.Legend", b =>
                {
                    b.HasOne("kauaicapstone.Models.ApplicationUser", "User")
                        .WithMany("UserLegend")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("kauaicapstone.Models.ViewLocation")
                        .WithMany("Legends")
                        .HasForeignKey("ViewLocationId");
                });

            modelBuilder.Entity("kauaicapstone.Models.LegendViewLocation", b =>
                {
                    b.HasOne("kauaicapstone.Models.Legend", "Legend")
                        .WithMany("viewLocations")
                        .HasForeignKey("LegendId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("kauaicapstone.Models.ViewLocation", "ViewLocation")
                        .WithMany()
                        .HasForeignKey("ViewLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("kauaicapstone.Models.ViewLocation", b =>
                {
                    b.HasOne("kauaicapstone.Models.ApplicationUser", "User")
                        .WithMany("UserViewLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
